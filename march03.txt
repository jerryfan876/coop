Know yourself,

answering questions
Know yourself 
	who are you
	

research them (the company)
	what am i applying for each job
	what skills i have to bring to the job, and what i wanna learn from it 
	know about the company
	find questions for the company (to show interest)
	PI -> principle investigators 
	how to get to know the interviewers? 
		linkedin, github
	glassdoor as a resource to find more about positions and companies 
	
At the interview 
	first impressions = lasting impression
	smile and ethusiasm and interest
	dont play on the phone 
	aware of body language 
		fidgeting, slouching, playing with hair 
		lack of eye contact 
	
	
interview questions 
	identify and learn to address the hidden agenda of an interview question 
	what is the emplyer really trying to uncover
	video -> "tell me about yourself"
	
	Question types
		Open(introductory)
			tell me about yourself
			what do i want to switch carrers
			why did u choose cs major 
			what are your interests
		Behavioral
			past behaviore 
			past experiences are indication for the future 
			need to provide example (important)
		Technical
		Creative thinking 
			"why is a manhole round"
		other/surprises
	questions vary each time, be ready
	
	Open ended
		"strength and weakness"
			weakness 
				-quiet in a large group, i do better in private convo, 1 on 1 convo, i try to force myself to speak up when it is urgent and important
				-time management, set detailed schedule and following the schedule, try to have realistic schedule
				-writing, and english and grammer, double profread, stay away from complex sentences and instead have straight forward lists, sentences. 
		"tell me about yourself"
			suggested framework
			answer for 2 mins, no longer 
				Personal
				Academic
				Work Experience
				Social 
		"why interested in position"
		"how do u know the company"
	
	Behavioral Questions
		"tell me about a time when..."
		"give me an example..."
		Answer should NOT be: 80% situation, 10% action, 10% result
		20% situation, 60% action, 20% result 
		result -> learnt, experience, what was not successful 
		
	technical questions 
		familiar with sort, search, data structure (hash sets, linked),   
		anticipate potential questions, preparation 
		project related qustions 
			know my own projects 
		prgramming questions
		qa question
		conceptual questions 
		design questions
		code analysis questions 
			time/space complexity
			rewrite the code given 
		
		
		
		How to answer:
			ask questions for clairfication 
			using pictures to elaberate 
			talk while answering question 
			1-ask for clarification
			2-design, mention brute force solution
			3-sketch a framework pseudocode 
			4-code it, dont rush
			5-test-extreme cases, user error, null cases
			6-complexity, time or space usage 
			
			talk out loud
			use cases, different wys to do it 
			test cases
			design it then write
			
		books resource: Cracking the coding intweviews, programming interviews exposed 

	Asking the interviewers questions:
		prepare 3-5 questions 
	
	
	
	